package grin;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import zede.util.Hex;

/**
 * 
 * how to start the local node? run
 * /data3/soft/mimblewimble/grin/target/release/grin
 *
 * to build, under 
 *  /data3/soft/mimblewimble/grin
 * cargo build --release
 * docs: https://github.com/mimblewimble/grin/blob/master/doc/build.md
 * 
 *
 * when we are doing debug/test, the local node might deny us. I should disable that
 * (in /grin/p2p/src/handshake.rs in initiate and accept. or by change the return of is_denied in
 * /grin/p2p/src/peer.rs).
 * 
 * 
 * 
 */
public class Start {

    static PeerSelf self = new PeerSelf();
    static boolean quit;

    /*
 * first one recived
    
   
 * 
 * 
 * 
 * 
 * @param args 
     */
    public static void main(String[] args) {
        try {
            self.genesis = Genesis.main;
            self.capabilites = 0x0f;
            self.totalDifficulty = //0x0002e45c_492ae37cl;
                                   0x000382937ed69b4bl;
            self.self = self;
            self.loadPeers().thenRun(() -> {
                try {
//0x0704 = 1796
// 52 + 1796*2=52+3592 = 3644
                    String speers1 = "613d0600000000000007040000010000655df6a30d560095ca35250d560053175deb0d560056812a8d0d560023e39b550d56003435dd0f0d5600d33842240d5600343beeb20d560023b8540d0d56007e6cf3e30d5600050957070d560023ee76880d56002d20eca60d560058caf64a0d5600d8dd57be0d5600794b94ff0d560053f0529d0d56006f4739ca0d5600791f295b0d56005fd80bbb0d56009273acfa0d560023b54cdb0d560054c169fd0d5600bff3c72a0d56001bdf55430d560012da13b60d56000e76817b0d56005764a26e0d56006cc4c8e90d56005863fa180d56005066251c0d5600511a98e20d56004e2d411a0d56004670c85a0d56005382e0fd0d560093870b90352e001761f6da0d560058829d060d56004b28cf6e0d560088184e190d560023b688f10d5600550acaa70d56009f415af20d56002a7476d30d56005387cc930d5600183ef7970d5600dd01456e0d560044b7a7b70d56003f22237c0d56008e5d8dbd0d560059a938940d560023b5235d0d560023c473fd0d560054c0d36f0d56007d7d2a940d56002f6f5e570d56002f61c6150d5600b924bff40d560023f3c4e00d56005862c6c40d5600743ed6800d56003f56bc1c0d560077f602b20d5600dd7cc3f30d56009b8adef20d56004f89290e0d56005e82cfec0d5600b23f10340d740036f51dfc0d560049034c210d56002f4b96ac0d5600ac3adc230d5600c00086cb0d5600be7166230d5600b4a826be0d5600c3c911770d560005c4456b0d5600b2432f1c0d560032e028e10d5600883d03590d56000de65e300d56001855ad320d56003b9588d20d56006f25e40b0d5600041c86ca0d5600239df7d15b760023be80ee0d5600576ea1ea0d56002f65b8520d5600567b39560d5600279bc0e70d56005bb9272434660048c6c79e0d560086d1fbd60d56005842dcf90d560056bbae110d5600a7565ed30d56005eef09a90d560034c07eb40d560034390ee10d5600d05de7f00d5600b22188a50d56004d67c2810d5600a3acd2880d5600c3c9a8110d56002249fc960d56005519822f0d56006408b5240d5600934b5e730d56006dbe81950d5600743ec8890d5600341fd2bf0d5600a76303170d5600508afb3b0d5600224a91910d5600404f6ec20d56004631909b0d5600b9f5554e0d560012b32a680d56002f635adb0d56000d7152c10d56004802ef4b0d56005fd330b20d5600b9425f0c0d56003b6e0cb80d5600422a2ac30d56005bf18ce60d560068c899570d560068e50c050d5600784d96350d56002e15937b113e00b724500b0d56002f34efad0d560023d388a00d5600641230210d560072566f2c0d56004a439e780d5600c7f702d80d5600b4a43d620d5600557ec5ec0d5600276ac31f0d5600722706950d5600ad4f77f40d560051ab3aa70d56000d719dad0d56006bb5b1070d560023f18c650d56006dae393b0d5600d9856ece0d56002249eb2c0d56004632217e0d560023ee4e473466002f6fbf143466006a2662ae0d56002768310134660044b7a3d03466009294091f0d56002f4b46fc0d560012e03b300d5600cff6513f0d560023ea6e440d5600d9c579fa0d5600de5e497c0d56005a9ad7fc0d56008b63c0b00d5600344e5a9a0d5600adea9e730d5600cf9af5ee0d560023f38aad0d56001f03998b0d56008b634442352e0047beb79e0d5600b2b0af2c0d56002e6565790d56005b40d65b0d560051ab3a7c0d5600b23ee8310d560079ce99340d56002f4af3d20d5600dda389540d5600d45c7cb50d56005e82b70d0d56002e059d750d560046348f100d56002f6e55170d56002d12974d0d56008bb487a20d56002e655db10d56006cd0499b0d56002f4a3a230d560045a668260d5600239cdab40d560043fd6baa0d560047e5b0100d5600d06067a60d560023c543730d5600ae18a3c60d56006d7c12780d560023e53fd90d560044b7aa830d5600540392970d56002e045b300d5600b2476ef00d5600b9e1d26d0d56009de6d72d0d560048e56b840d560060f28eb70d56005f2b46130d56003ffb38bb0d56004ac4721e0d5600d5efd5b10d560023ca19550d560012bc198c0d56008ac5c10a0d560012d8270e0d56002e62bd420d56006275a2480d5600b9359e0c0d56009ec344130d560055d45f210d5600031087ae0d5600743ed9e00d560047a8b5b40d5600d4a90aca0d56007036219f0d560051047ecd0d560023ee53ea0d5600b987e9440d560023ce86e20d56006c40610c0d5600424534200d5600c6d362e40d5600c16b5c490d560053175c320d5600c6b27e100d56005863d1850d56006c3dceff0d560051ab55b10d5600682ed8330d5600784e867b0d560058c626530d5600b9e48d060d5600276b0cdf0d56002d2094330d56000de5ea5e0d560012e039100d56002760b4160d56005778249d113e002f64c7a60d56002f8494d00d5600d06f527a0d560068f8d7d60d5600cf941a6c0d5600477213de0d5600944c6c930d5600515ccd2b0d56";
                    String speers2 = "613d0600000000000007040000010000343beeb20d5600b4fc27860d5600a2fea8c10d5600d95028250d560018c4ed380d5600689aabc20d56002249fc960d56002ffeb3310d5600883d03590d560022ca33450d5600276a88510d5600b09a224d0d56005761eed10d56001fad571d0d56004e6bcc240d560069f7381e0d5600279bc0820d56002e655db10d56005236c63f0d560050430a8d0d5600df4838380d560058caf64a0d560023ee4e4734660055fa8a800d560078182ec20d56009de68e0b0d56006d5b271c0d560092c421c10d5600b9359e0c0d56004ca472100d56007de3b4d00d56001fad522f0d560044b7a3d0346600caa802100d560036f51dfc0d5600224adbfb0d5600ae18a3c60d560053f0529d0d56004471bd6b0d5600cf9af5ee0d5600239df7d15b760023a15e8d0d56005064cb970d5600d169afd10d5600c66490140d56004ebfa6ab0d56002e059d750d5600276ac31f0d5600a2f322a10d5600dda389540d56008b63c0b00d560059f5c4840d56000136b3160d56005d23a06c0d5600b08ef3120d56005fb3b3da0d5600b9435da50d5600567ea0d30d56007d7d2cda0d56008ba2999e0d56005d2a63820d56003e5efb220d56002d4a17880d560055f331a30d56006df5d83a0d560067d655ce0d5600b02de24a0d560003701d2e0d5600d5005fea0d560080497ead0d56009b8adef20d5600a7a074170d5600d33734100d56002760b4160d56000d7152c10d560044c3129b0d5600550acaa70d560023ce86e20d5600224cf1d60d56005b4ca9590d5600252e72720d5600492ea8710d56002f4b0dec0d560045a668260d56005b6b573c0d5600b14888b90d5600c2e4440f0d5600b054f3560d5600bcba5c010d5600db89056f346600bca647a80d56001f9ad0e60d5600c6d362e40d56002e6565790d560023b944530d5600c9f5f9780d5600b91fa6460d5600b44e96530d5600c06319d80d5600de9ae4ef0d5600d4e675a10d5600ae72585b0d5600189c6e190d5600548399480d56004deb86fa0d5600791f295b0d56009de612240d5600b899582a0d56003a47dd930d56003d9015a2346600b98d3c6a0d5600279bc0540d560023cd9fcd0d5600245263ee0d560059f578220d5600276bea6d0d56009de6af680d5600b03bccde0d5600524051e60d56006b1582350d56004b28cf6e0d56005eff892a0d5600bcebef080d5600369471b80d560036a16fc00d56000c6bff5b0d56006d28405e0d56005639c64d0d56003f22237c0d5600c3d3c1880d5600c6d9720f0d56003af60dd60d5600753399d30d5600c5a708580d5600b23f10340d6a000e76817b0d560001cb50860d5600279bc05f0d5600030f91920d5600563933f70d5600b03bc70b0d56005f6063720d560052d072970d56002e8c54220d560072270a510d56009538b67f0d56008975a66d0d56005dafe9720d560074cee4cb0d560051ce93fc0d56004d52d5150d560055491c550d56005e82cfec0d56000e91ad3634660008090fed0d560052d1f9200d56005fd84d120d5600ab63cd060d56001bdf55430d56003420b9ec0d5600771c3c340d5600224dfc370d56002f635adb0d56004651c7130d5600c90690be0d5600b2d74c360d5600515cce6d0d560023c8623c0d5600ded29b830d560005c4456b0d5600577bbf9e0d56002ffe52e20d560052977d2c0d560063c550120d5600bc37d7b60d56002f34efad0d5600ae32b8360d560018f60c140d560023cc53280d560072fa8dfa0d5600054a55960d5600576ea1ea0d56007da197f90d5600b2fad6720d5600c3c911770d560023be80ee0d5600224935c50d56009de6d72d0d5600b97cf6f20d5600b9ba384c0d56009f45b2c60d5600050374280d5600b947b02b0d560074cb37b90d560012da13b60d56005f983e010d560062cc6b480d5600782a9f4a0d56005354a3a70d56002f58ffa80d5600c19f00590d56002ff49c250d5600db49793c0d56002f6e55170d5600224939670d56002d4d200d0d560036f8d6b70d5600461e1b310d56006008c1770d560044b7aa830d5600524ef2030d56002f4aeb880d5600b962d0dd0d56005315129e0d56000e93535b0d5600b9c17e160d56006c52ce730d560086af152d0d560057655c4e0d5600b30d43980d56009273acfa0d560012e039100d5600b92465220d560043a939c00d560023f18c650d5600a18e27770d56006d3938610d5600b99a9f9d0d56005863d1850d5600c0fcde250d56006cc4c8e90d56002241982e0d56000513f4090d560073abde610d56004ca7f62a0d560070401ed40d56002d4c20c00d560051047ecd0d560012bc198c0d560023e098130d560088184e190d56005893ae190d56002d4de5ca0d56004c6989290d56005f2b46130d56002f605a000d5600b78f1c540d56009d7a4da60d56002aee9e3b0d5600adea9e730d5600cc6e0cc40d56006bb6ef8b0d5600d1fafd690d56002f8494d00d560053a281230d56002f4b50fe0d56";
                    for (String speers : new String[]{speers1, speers2}) {
                        byte[] peers = Hex.toByteArray(speers);
                        ByteBuffer bb = ByteBuffer.wrap(peers);
                        self.read(bb);
                    }
                    Networking_Core.init().start();

                    //self.connectToPeers();
                    self.pickOneToConnect();
                    
                } catch (Throwable t) {
                    throw new IllegalStateException(t);
                }
            }).exceptionally(t -> {
                t.printStackTrace(System.out);
                return (Void) null;
            });

            while (quit == false) {
                Thread.sleep(1000);
            }
        } catch (Throwable t) {
            t.printStackTrace(System.out);
        }
    }

}
